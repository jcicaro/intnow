<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_9260_intnow.IntegrateNowUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>IntegrateNowUtil</name>
        <script><![CDATA[var IntegrateNowUtil = Class.create();
IntegrateNowUtil.prototype = {
    initialize: function () {
        this.debug = true;
    },

    processBusinessRule: function (current, type, journalValuesStr) {
        if (!type) {
            return null;
        }
        var util = this;
        var params = util.getParameterValuesFromScript(current, type, journalValuesStr);
        
        params.forEach(function (param) {
            var r = util.executeWebService(param);
            var response = r.response;
            var result = util.evaluateResponseHandlerScript(response,
                current,
                param.webServiceMap);
        });

    },

    sendHttpRequest: function(httpRequestGr) {
        httpRequestGr.http_status_code = '';
        httpRequestGr.http_response_body = '';
        httpRequestGr.state = 'Pending';
        httpRequestGr.update();
        try {
            var r = new sn_ws.RESTMessageV2(httpRequestGr.ws_message.name + '', httpRequestGr.ws_method.function_name + '');
            r.setEndpoint(httpRequestGr.getValue('endpoint'));
            if (httpRequestGr.http_request_body) { 
                var body = JSON.stringify(httpRequestGr.getValue('http_request_body'));
                r.setRequestBody(body); 
            }
            var response = r.execute();

            this.updateGr(httpRequestGr, {
                state: 'Completed',
                http_status_code: response.getStatusCode(),
                http_response_body: response.getBody()
            });
            
        } catch (error) {
            this.log(error, 'error')
        }
        
    },

    executeWebService: function (param) {
        if (!param) {
            return null;
        }

        try {

            var messageName = param.webServiceMap.ws_message.name + '';
            var methodName = param.webServiceMap.ws_method.function_name + '';
            var answer = this.isObject(param.answer) ? param.answer : {};

            var r = new sn_ws.RESTMessageV2(messageName, methodName);

            for (var i in answer) {
                if (answer.hasOwnProperty(i)) {
                    r.setStringParameter(i, answer[i]);
                }
            }

            var response = r.execute();

            //             var responseBody = response.getBody();
            //             var httpStatus = response.getStatusCode();

            this.createGr('x_9260_intnow_http_request', {
                ws_message: param.webServiceMap.ws_message+'',
                ws_method: param.webServiceMap.ws_method+'',
                state: 'Completed',
                endpoint: r.getEndpoint(),
                http_request_body: r.getRequestBody(),
                http_status_code: response.getStatusCode(),
                http_response_body: response.getBody()
            });

            var result = {
                request: r,
                response: response
            };

            return result;

        } catch (error) {
            this.log('Error in executeWebService...', 'error');
            this.log(error, 'error');
        }

    },
	
    evaluateParameterScript: function (current, webServiceMap, journalValuesStr) {

        if (!current || !webServiceMap) {
            return null;
        }

        var evaluator = new GlideScopedEvaluator();

        evaluator.putVariable('source', current);
        evaluator.putVariable('journal', JSON.parse(journalValuesStr));
        evaluator.putVariable('webServiceMap', webServiceMap);
        evaluator.putVariable('answer', null);

        evaluator.evaluateScript(webServiceMap, 'parameter_script', null);

        var answer = evaluator.getVariable('answer');
        return answer;
    },

    evaluateResponseHandlerScript: function (response, current, webServiceMap) {

        if (!response || !current || !webServiceMap) {
            return null;
        }

        var evaluator = new GlideScopedEvaluator();

        evaluator.putVariable('response', response);
        evaluator.putVariable('source', current);
        evaluator.putVariable('webServiceMap', webServiceMap);
        evaluator.putVariable('h', new InboundHelper());
        evaluator.putVariable('answer', null);

        evaluator.evaluateScript(webServiceMap, 'response_handler_script', null);

        var answer = evaluator.getVariable('answer');
        return answer; // just return an error if there's an error
    },

    getParameterValuesFromScript: function (current, type, journalValuesStr) {
        if (!type) {
            return null;
        }

        type = type.toUpperCase();

        var params = [];

        var util = this;

        var gr = new GlideRecord('x_9260_intnow_web_service_map');
        gr.addQuery('table', current.getTableName());
        gr.addQuery('active', 'true');
        if (type === 'INSERT') {
            gr.addQuery('on_insert', 'true');
        } else if (type === 'UPDATE') {
            gr.addQuery('on_update', 'true');
        } else if (type === 'JOURNAL_UPDATE') {
            gr.addQuery('on_journal_update', 'true');
        }  
		else {
            return params;
        }

        gr.query();
        while (gr.next()) {
            var isInFilter = gr.getValue('filter') ?
                GlideFilter.checkRecord(current, gr.getValue('filter')) : true;
            if (isInFilter) {
                var answer = util.evaluateParameterScript(current, gr, journalValuesStr);
                var mapGr = new GlideRecord('x_9260_intnow_web_service_map');
                mapGr.get(gr.getValue('sys_id'));
                params.push({
                    webServiceMap: mapGr,
                    answer: answer
                });
            }
        }

        return params;

    },

    removeHTMLTags: function (str) {
    var regX = /(<([^>]+)>)/ig;
        return str.replace(regX, "");
    },

    updateGr: function (gr, fieldValues) {

        for (var i in fieldValues) {
            if (fieldValues.hasOwnProperty(i)) {
                gr[i] = fieldValues[i];
            }
        }

        gr.update();
        return gr;
    },

    createGr: function (table, fieldValues) {
        var gr = new GlideRecord(table);
        gr.initialize();

        for (var i in fieldValues) {
            if (fieldValues.hasOwnProperty(i)) {
                gr[i] = fieldValues[i];
            }
        }

        gr.insert();
        return gr;
    },

    // === Value Checks ===

    isFunction: function (obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    },

    isArray: function (val) {
        return Object.prototype.toString.call(val) === '[object Array]';
    },

    isObject: function (val) {
        return (val !== null && typeof val === 'object');
    },

    // === Log ===

    log: function (msg, logType) {
        if (this.debug === false) {
            return null;
        } // exit

        logType = logType || 'info';

        if (!msg) {
            gs.error(msg + '');
            return null;
        }

        if (this.isObject(msg) || this.isArray(msg)) {
            msg = JSON.stringify(msg);
        }

        gs[logType](msg);
    },

    type: 'IntegrateNowUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>xJuanCarlo.Icaro</sys_created_by>
        <sys_created_on>2018-03-14 08:45:34</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>45d3b81edbb41b0012b2f00fbf961931</sys_id>
        <sys_mod_count>91</sys_mod_count>
        <sys_name>IntegrateNowUtil</sys_name>
        <sys_package display_value="IntegrateNow" source="x_9260_intnow">00853739dbf8d70012b2f00fbf9619a0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="IntegrateNow">00853739dbf8d70012b2f00fbf9619a0</sys_scope>
        <sys_update_name>sys_script_include_45d3b81edbb41b0012b2f00fbf961931</sys_update_name>
        <sys_updated_by>xJuanCarlo.Icaro</sys_updated_by>
        <sys_updated_on>2018-03-17 22:57:48</sys_updated_on>
    </sys_script_include>
</record_update>
